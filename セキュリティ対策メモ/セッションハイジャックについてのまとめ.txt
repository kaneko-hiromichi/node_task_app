セッションハイジャックについてのまとめ
セッションハイジャックとは

セッションハイジャックは、攻撃者が有効なセッションIDを盗み取り、そのセッションIDを使用して正当なユーザーとしてシステムにアクセスする攻撃です。これにより、攻撃者はユーザーの権限を乗っ取り、機密情報にアクセスしたり不正行為を行ったりすることが可能になります。
ハッカーが期待すること

    認証バイパス:
        正当なユーザーとしてシステムにアクセスし、認証をバイパスします。
        管理者権限を持つユーザーのセッションを乗っ取ることで、システム全体の制御を奪うことが可能になります。

    機密情報の取得:
        ユーザーの個人情報や機密データにアクセスします。
        例: クレジットカード情報、個人識別情報、企業の機密情報など。

    不正行為の実行:
        正当なユーザーの権限を悪用して、不正な操作やデータの改ざんを行います。
        例: 他のユーザーのデータを削除する、商品価格を変更するなど。

検証方法

    ログインリクエストのキャプチャ:
        ブラウザでログインページにアクセスし、ログイン情報を入力してログインボタンをクリックします。
        Burp Suiteでリクエストがキャプチャされるのを確認します。

    リクエストの改ざん:
        キャプチャされたリクエスト内のセッションID（connect.sid）を確認し、他のユーザーのセッションIDに変更します。

    リクエストの送信:
        変更が完了したら、「Forward」をクリックしてリクエストを送信します。

検証結果

    成功:
        攻撃者が改ざんされたセッションIDを使用して正当なユーザーとしてシステムにアクセスできた場合、セッションハイジャックが成功となります。
        攻撃者は他のユーザーのアカウントにアクセスし、機密情報を取得したり、不正行為を行ったりすることができます。

    失敗:
        サーバーがセッションIDの改ざんを検出し、不正なリクエストを拒否した場合、セッションハイジャックが失敗となります。
        セッションIDが署名されている場合、改ざんされたセッションIDは署名が一致しないため無効となります。

今回の例題の対策内容

    セッションIDの署名:
        express-session を使用し、セッションIDが署名されているため、改ざんが検出されます。
        実際のログ
        connect.sid=s%3A080T3tkkitfOZRs61R2-jD2tVX9RGPSt.%2FOnsGm5WwRZ6KQyZ4PKJh7S25nBnjhPOYRYQF3HuRGY
        このような不規則なidに変換されている

javascript

const session = require('express-session');
app.use(session({
  secret: 'your_secret_key', // セッションIDの署名に使われるキー
  resave: false,
  saveUninitialized: true,
  cookie: { 
    secure: true, // HTTPSでのみ送信
    httpOnly: true, // JavaScriptからアクセス不可
    sameSite: 'strict' // CSRF攻撃を防ぐ
  }
}));

    セッションIDの安全な生成:
        セッションIDは予測不可能で十分に長いランダムな文字列で生成されます。

    セッションIDのセキュアな伝達:
        HTTPSを使用してセッションIDを暗号化し、安全に伝達します。

    クッキーのセキュリティ設定:
        Secure、HttpOnly、SameSite 属性を設定し、セッションIDの盗難や改ざんを防ぎます。

悪いコーディング例

以下のコードはセッション管理が適切に行われていない例です。

javascript

const session = require('express-session');
app.use(session({
  secret: 'weak_secret_key', // 短く予測可能なキー
  resave: true, // セッションが変更されていなくても再保存
  saveUninitialized: true,
  cookie: { secure: false } // HTTPSを使用しない
}));

    問題点:
        secret が短く、予測可能なキーであるため、セッションIDの署名が容易に破られる可能性があります。
        resave: true により、セッションが変更されていなくても再保存されるため、セッション固定化攻撃のリスクが高まります。
        cookie: { secure: false } により、セッションIDが暗号化されずに送信されるため、ネットワーク上で盗聴されるリスクがあります。

まとめ

    セッションハイジャックの目的:
        認証バイパス、機密情報の取得、不正行為の実行。

    検証方法:
        Burp Suiteを使用してセッションIDを改ざんし、正当なユーザーとしてシステムにアクセスを試みる。

    検証結果:
        成功した場合、攻撃者が他のユーザーのアカウントにアクセスできる。失敗した場合、セッションIDの改ざんが検出される。

    対策内容:
        セッションIDの署名、セキュアな生成と伝達、クッキーのセキュリティ設定。

    悪いコーディング例:
        短く予測可能なキー、secure: false の設定などが含まれた不適切なセッション管理。